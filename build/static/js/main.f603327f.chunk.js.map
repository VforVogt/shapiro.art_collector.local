{"version":3,"sources":["components/Loading.js","api/index.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["Loading","BASE_URL","KEY","fetchQueryResultsFromURL","url","a","fetch","response","json","data","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Preview","props","setSearchResults","setFeaturedResult","setIsLoading","searchResults","info","fetchPage","pageUrl","results","console","error","id","className","disabled","prev","onClick","next","map","record","index","key","event","preventDefault","primaryimageurl","src","alt","description","title","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","centuries","classifications","getCenturiesAndClassifications","onSubmit","log","htmlFor","type","placeholder","value","onChange","target","length","name","ele","Title","App","ReactDOM","render","document","getElementById"],"mappings":"kLAkBeA,I,uBCbFC,EAAW,oCACXC,EAAM,8CAmBZ,SAAeC,EAAtB,kC,4CAAO,WAAwCC,GAAxC,iBAAAC,EAAA,+EAEoBC,MAAMF,GAF1B,cAEGG,EAFH,gBAGgBA,EAASC,OAHzB,cAGGC,EAHH,yBAKIA,GALJ,wG,sBAgBA,SAAeC,EAAtB,kC,4CAAO,uCAAAL,EAAA,6DACLM,EADK,EACLA,QACAC,EAFK,EAELA,eACAC,EAHK,EAGLA,YAEMT,EALD,UAKWH,EALX,mBAKgCC,EALhC,2BAKwDU,EALxD,oBAMHD,EANG,oBAMkBE,GANlB,kBASoBP,MAAMF,GAT1B,cASGG,EATH,gBAUgBA,EAASC,OAVzB,cAUGC,EAVH,yBAYIA,GAZJ,wG,sBAqBA,SAAeK,IAAtB,+B,4CAAO,kCAAAT,EAAA,0DACDU,aAAaC,QAAQ,aADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,eAFpC,cAKCZ,EALD,UAKWH,EALX,oBAKiCC,EALjC,kDAQoBI,MAAMF,GAR1B,cAQGG,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGU,EAAUV,EAAKU,QAErBJ,aAAaK,QAAQ,YAAaH,KAAKI,UAAUF,IAZ9C,kBAcIA,GAdJ,wG,sBAuBA,SAAeG,IAAtB,+B,4CAAO,kCAAAjB,EAAA,0DACDU,aAAaC,QAAQ,mBADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,qBAFpC,cAKCZ,EALD,UAKWH,EALX,2BAKwCC,EALxC,yCAQoBI,MAAMF,GAR1B,cAQGG,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGU,EAAUV,EAAKU,QAErBJ,aAAaK,QAAQ,kBAAmBH,KAAKI,UAAUF,IAZpD,kBAcIA,GAdJ,wG,sBC7EP,IAqEeI,EArEC,SAACC,GAAU,IAQfC,EAAqED,EAArEC,iBAAkBC,EAAmDF,EAAnDE,kBAAmBC,EAAgCH,EAAhCG,aARtB,EAQsDH,EAAlBI,eAClB,GAAlCC,EATgB,EAShBA,KAAMV,EATU,EASVA,QATU,SAeVW,EAfU,8EAezB,WAAyBC,GAAzB,eAAA1B,EAAA,6DACEsB,GAAa,GADf,kBAI0BxB,EAAyB4B,GAJnD,OAIUC,EAJV,OAKIP,EAAiBO,GALrB,gDAOIC,QAAQC,MAAR,MAPJ,yBASIP,GAAa,GATjB,6EAfyB,sBA4BzB,OAAO,2BAAOQ,GAAG,WACf,4BAAQC,UAAU,cAEhB,4BACEC,UAAWR,EAAKS,KAChBF,UAAU,WACVG,QAAS,kBAAMT,EAAUD,EAAKS,QAHhC,YAKA,4BACED,UAAWR,EAAKW,KAChBJ,UAAU,OACVG,QAAS,kBAAMT,EAAUD,EAAKW,QAHhC,SAKF,6BAASJ,UAAU,WAChBjB,GAAWA,EAAQsB,KAAI,SAACC,EAAQC,GAAT,OAEpB,yBACEC,IAAMD,EACNP,UAAU,iBACVG,QAAS,SAACM,GAERA,EAAMC,iBAENpB,EAAkBgB,KAIlBA,EAAOK,iBACL,yBAAKC,IAAON,EAAOK,gBAAiBE,IAAOP,EAAOQ,cAKpD,4BAAKR,EAAOS,OAAS,uBCiEpBC,EA3HA,SAAC,GAAwC,IAAtCzB,EAAqC,EAArCA,aAAcF,EAAuB,EAAvBA,iBAAuB,EAcb4B,mBAAS,IAdI,mBAc5CC,EAd4C,KAc/BC,EAd+B,OAeCF,mBAAS,IAfV,mBAe5CG,EAf4C,KAexBC,EAfwB,OAgBbJ,mBAAS,IAhBI,mBAgB5CxC,EAhB4C,KAgB/B6C,EAhB+B,OAiBrBL,mBAAS,OAjBY,mBAiB5C1C,EAjB4C,KAiBnCgD,EAjBmC,OAkBPN,mBAAS,OAlBF,mBAkB5CzC,EAlB4C,KAkB5BgD,EAlB4B,KAkErD,OA9BAC,qBAAU,YAC4B,uCAAG,8BAAAxD,EAAA,+EAEXS,IAFW,cAE7BgD,EAF6B,gBAGLxC,IAHK,OAG7ByC,EAH6B,OAInCR,EAAeO,GACfL,EAAsBM,GALa,kDAOnC9B,QAAQC,MAAR,MAPmC,0DAAH,qDAUpC8B,KACC,IAkBI,0BAAM7B,GAAG,SAAS8B,SAAQ,uCAAE,WAAOpB,GAAP,eAAAxC,EAAA,6DACjCwC,EAAMC,iBACNnB,IAFiC,kBAITjB,EAAkB,CACtCC,UACAC,iBACAC,gBAP6B,OAIzBmB,EAJyB,OAS/BP,EAAiBO,GATc,gDAW/BC,QAAQiC,IAAR,MAX+B,yBAa/BvC,GAAa,GAbkB,4EAAF,uDAgB/B,kCACE,2BAAOwC,QAAQ,YAAf,SACA,2BACEhC,GAAG,WACHiC,KAAK,OACLC,YAAY,oBACZC,MAAOzD,EACP0D,SAAU,SAAA1B,GAAK,OAAIa,EAAeb,EAAM2B,OAAOF,WAEnD,kCACE,2BAAOH,QAAQ,yBAAf,kBAAsD,0BAAM/B,UAAU,wBAAhB,IAA0CoB,EAAmBiB,OAA7D,MACtD,4BACEC,KAAK,iBACLvC,GAAG,wBACHmC,MAAO1D,EACP2D,SACE,SAAA1B,GAAK,OAAIe,EAAkBf,EAAM2B,OAAOF,SAE1C,4BAAQA,MAAM,OAAd,OACCd,EAAmBf,KAAI,SAACkC,GACvB,OAAO,4BAAQ/B,IAAK+B,EAAIxC,IAAKwC,EAAID,WAIvC,kCACE,2BAAOP,QAAQ,kBAAf,WAAwC,0BAAM/B,UAAU,iBAAhB,IAAmCkB,EAAYmB,OAA/C,MACxC,4BACEC,KAAK,UACLvC,GAAG,iBACHmC,MAAO3D,EACP4D,SAAU,SAAA1B,GAAK,OAAIc,EAAWd,EAAM2B,OAAOF,SAC3C,4BAAQA,MAAM,OAAd,OACChB,EAAYb,KAAI,SAACkC,GAChB,OAAO,4BAAQ/B,IAAK+B,EAAIxC,IAAKwC,EAAID,WAIvC,4CC1GaE,MAThB,WACG,OACE,yBAAKzC,GAAG,SACN,iDACA,qFCPF0C,EAAM,WAAM,MAU0BxB,mBAAS,CAACxB,KAAM,GAAIV,QAAS,KAVvD,mBAUTS,EAVS,KAUMH,EAVN,OAW4B4B,mBAAS,MAXrC,mBAWO3B,GAXP,aAYkB2B,oBAAS,GAZ3B,mBAYE1B,GAZF,WAchB,OAAO,yBAAKS,UAAU,OAEpB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAQT,aAAcA,EAAcF,iBAAkBA,IAEtD,kBAAC,EAAD,CAASG,cAAeA,EAAeD,aAAcA,EAAcF,iBAAkBA,EAAkBC,kBAAmBA,MAa9HoD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,S","file":"static/js/main.f603327f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * Create and export a component called Loading which uses this static HTML template:\r\n *\r\n * <div id=\"loading\">\r\n *   <h2 className=\"message\">Searching...</h2>\r\n * </div>\r\n */\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div id=\"loading\">\r\n      <h2 className=\"message\">Searching...</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","/**\r\n * This file features and exports all of your calls to the API\r\n * \r\n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\r\n */\r\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\r\nexport const KEY = 'apikey=49a4e826-5f2d-4e32-9d42-e8d416c2e2bb';\r\n\r\n/**\r\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\r\n */\r\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\r\n  try {\r\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\r\n */\r\nexport async function fetchQueryResultsFromURL(url) {\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\r\n * \r\n * Then makes a call to the API, and returns the first page of results\r\n */\r\nexport async function fetchQueryResults({\r\n  century,\r\n  classification,\r\n  queryString,\r\n}) {\r\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \r\n    century }&keyword=${ queryString }`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\r\n */\r\nexport async function fetchAllCenturies() {\r\n  if (localStorage.getItem('centuries')) {\r\n    return JSON.parse(localStorage.getItem('centuries'));\r\n  }\r\n\r\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const records = data.records;\r\n\r\n    localStorage.setItem('centuries', JSON.stringify(records));\r\n\r\n    return records;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \r\n */\r\nexport async function fetchAllClassifications() {\r\n  if (localStorage.getItem('classifications')) {\r\n    return JSON.parse(localStorage.getItem('classifications'));\r\n  }\r\n\r\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const records = data.records;\r\n\r\n    localStorage.setItem('classifications', JSON.stringify(records));\r\n\r\n    return records;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}","import React from 'react';\r\n\r\n/**\r\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\r\n * which are query urls.\r\n */\r\nimport { fetchQueryResultsFromURL } from '../api';\r\n\r\nconst Preview = (props) => {\r\n  /**\r\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\r\n   * and also destructure info and records from props.searchResults\r\n   * \r\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\r\n   */\r\n    // console.log(props)\r\n    const { setSearchResults, setFeaturedResult, setIsLoading, searchResults } = props;\r\n    const {info, records} = searchResults || {}\r\n  /**\r\n   * Don't touch this function, it's good to go.\r\n   * \r\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\r\n   */\r\n  async function fetchPage(pageUrl) {\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const results = await fetchQueryResultsFromURL(pageUrl);\r\n      setSearchResults(results);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return <aside id=\"preview\">\r\n    <header className=\"pagination\">\r\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\r\n      <button \r\n        disabled={!info.prev} \r\n        className=\"previous\"\r\n        onClick={() => fetchPage(info.prev)}>Previous</button>\r\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\r\n      <button\r\n        disabled={!info.next}\r\n        className=\"next\"\r\n        onClick={() => fetchPage(info.next)}>Next</button>\r\n    </header>\r\n    <section className=\"results\">\r\n      {records && records.map((record, index) => (\r\n        // Here we should map over the records, and render something like this for each one:\r\n          <div  \r\n            key={ index }\r\n            className=\"object-preview\"\r\n            onClick={(event) => {\r\n              // prevent the default\r\n              event.preventDefault();\r\n              // set the featured result to be this record, using setFeaturedResult\r\n              setFeaturedResult(record);\r\n            }}>\r\n            { \r\n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \r\n              record.primaryimageurl && (\r\n                <img src = {record.primaryimageurl} alt = {record.description}/>\r\n              )\r\n            }\r\n            {\r\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\r\n              <h3>{record.title || \"MISSING INFO\"}</h3>\r\n            }\r\n          </div>\r\n      ))}\r\n    </section>\r\n  </aside>\r\n}\r\n\r\nexport default Preview;","import React, { useEffect, useState } from 'react';\r\n\r\n/**\r\n * Don't touch these imports!\r\n */\r\nimport { \r\n  fetchAllCenturies,\r\n  fetchAllClassifications,\r\n  fetchQueryResults\r\n} from '../api';\r\n\r\nconst Search = ({ setIsLoading, setSearchResults }) => {\r\n  // Make sure to destructure setIsLoading and setSearchResults from the props\r\n\r\n\r\n  /**\r\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\r\n   * our controlled inputs:\r\n   * \r\n   * centuryList, setCenturyList (default should be an empty array, [])\r\n   * classificationList, setClassificationList (default should be an empty array, [])\r\n   * queryString, setQueryString (default should be an empty string, '')\r\n   * century, setCentury (default should be the string 'any')\r\n   * classification, setClassification (default should be the string 'any')\r\n   */\r\n    const [centuryList, setCenturyList] = useState([]);\r\n    const [classificationList, setClassificationList] = useState([]);\r\n    const [queryString, setQueryString] = useState(\"\");\r\n    const [century, setCentury] = useState(\"any\");\r\n    const [classification, setClassification] = useState(\"any\");\r\n\r\n  /**\r\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\r\n   * \r\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\r\n   * \r\n   * Make sure to console.error on caught errors from the API methods.\r\n   */\r\n  // useEffect(() => {\r\n  //   Promise.all(fetchAllCenturies()).then(centuries => {\r\n  //     setCenturyList(centuries);\r\n  //   })\r\n  //   Promise.all(fetchAllClassifications()).then(classifications => {\r\n  //     setClassificationList(classifications);\r\n  //   })\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    const getCenturiesAndClassifications = async () => {\r\n      try {\r\n        const centuries = await fetchAllCenturies();\r\n        const classifications = await fetchAllClassifications();\r\n        setCenturyList(centuries);\r\n        setClassificationList(classifications);\r\n      } catch (ex) {\r\n        console.error(ex);\r\n      }\r\n    };\r\n    getCenturiesAndClassifications();\r\n  }, []);\r\n\r\n  /**\r\n   * This is a form element, so we need to bind an onSubmit handler to it which:\r\n   * \r\n   * calls event.preventDefault()\r\n   * calls setIsLoading, set it to true\r\n   * \r\n   * then, in a try/catch/finally block:\r\n   * \r\n   * try to:\r\n   * - get the results from fetchQueryResults({ century, classification, queryString })\r\n   * - pass them to setSearchResults\r\n   * \r\n   * catch: error to console.error\r\n   * \r\n   * finally: call setIsLoading, set it to false\r\n   */\r\n  return <form id=\"search\" onSubmit={async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading();\r\n    try {\r\n      const results = await fetchQueryResults({\r\n        century, \r\n        classification, \r\n        queryString\r\n      });\r\n      setSearchResults(results);\r\n    } catch (err) {\r\n      console.log(err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }}>\r\n    <fieldset>\r\n      <label htmlFor=\"keywords\">Query</label>\r\n      <input \r\n        id=\"keywords\" \r\n        type=\"text\" \r\n        placeholder=\"enter keywords...\" \r\n        value={queryString} \r\n        onChange={event => setQueryString(event.target.value)}/>\r\n    </fieldset>\r\n    <fieldset>\r\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\r\n      <select \r\n        name=\"classification\"\r\n        id=\"select-classification\"\r\n        value={classification} \r\n        onChange={\r\n          event => setClassification(event.target.value)\r\n        }>\r\n        <option value=\"any\">Any</option>\r\n        {classificationList.map((ele) => {\r\n          return <option key={ele.id}>{ele.name}</option>\r\n        })}\r\n      </select>\r\n    </fieldset>\r\n    <fieldset>\r\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\r\n      <select \r\n        name=\"century\" \r\n        id=\"select-century\"\r\n        value={century} \r\n        onChange={event => setCentury(event.target.value)}>\r\n        <option value=\"any\">Any</option>\r\n        {centuryList.map((ele) => {\r\n          return <option key={ele.id}>{ele.name}</option>\r\n        })}\r\n      </select>\r\n     </fieldset>\r\n    <button>SEARCH</button>\r\n  </form>\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\n/**\r\n * Create/export a component called Title which uses this static HTML as the template:\r\n * \r\n * <div id=\"title\">\r\n *   <h1>\r\n *     The Art Collector\r\n *   </h1>\r\n *   <h5>\r\n *     Search the Harvard Art Museums' Private Collections\r\n *   </h5>\r\n * </div>\r\n */\r\n\r\n function Title() {\r\n    return (\r\n      <div id=\"title\">\r\n        <h1>The Art Collector</h1>\r\n        <h5>Search the Harvard Art Museums' Private Collections</h5>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Title;\r\n  ","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// These imports won't work until you fix ./components/index.js\r\nimport {\r\n  Feature,\r\n  Loading,\r\n  Preview,\r\n  Search,\r\n  Title\r\n} from './components';\r\n\r\nconst App = () => {\r\n  /**\r\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\r\n   * be made here, so create state pairs using useState() for:\r\n   * \r\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\r\n   * featuredResult, setFeaturedResult (default should be null)\r\n   * isLoading, setIsLoading (default should be false)\r\n   */\r\n\r\n  const [searchResults, setSearchResults] = useState({info: {}, records: []});\r\n  const [featuredResult, setFeaturedResult] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  return <div className=\"app\">\r\n    {/* <Title /> is static, doesn't need any props */}\r\n    <Title />\r\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\r\n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\r\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\r\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult}/>\r\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\r\n    {/* <Feature featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults} /> */}\r\n    {/* <Loading /> is static, but should only render when isLoading is true */}\r\n    {/* <Loading /> use a ternary and render null if isLoading is false */}\r\n  </div>\r\n}\r\n\r\n/**\r\n * Boostrap the <App /> component into the '#app' element in the DOM,\r\n * using ReactDOM.render();\r\n */\r\n\r\nReactDOM.render(<App />, document.getElementById(\"app\"));"],"sourceRoot":""}